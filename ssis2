import tkinter as tk
from tkinter import font as tkfont
from tkinter import *
from tkinter import ttk
import tkinter.messagebox
import sqlite3

class SSIS:
    def __init__(self,root):
        self.root = root
        self.root.title("Student Information System")
        self.root.geometry("1520x790+0+0")
        self.root.resizable(False, False)
                
        Course_Code = StringVar()
        Course_Name = StringVar()
        SearchBar_Var = StringVar()
        
        def connectCourse():
            conn = sqlite3.connect("StudentDatabase.db")
            cur = conn.cursor()
            cur.execute("PRAGMA foreign_keys = ON")
            cur.execute("CREATE TABLE IF NOT EXISTS courses (Course_Code TEXT PRIMARY KEY, Course_Name TEXT)") 
            conn.commit() 
            conn.close()
            
        def addCourse():
            conn = sqlite3.connect("StudentDatabase.db")
            c = conn.cursor()         
            #Insert Table
            c.execute("INSERT INTO courses(Course_Code,Course_Name) VALUES (?,?)",\
                      (Course_Code.get(),Course_Name.get()))        
            conn.commit()       
            clearCourse()
            conn.close() 
            tkinter.messagebox.showinfo("Student Information System", "Course Recorded Successfully")
            displayCourse()
              
        def displayCourse():
            self.courselist.delete(*self.courselist.get_children())
            conn = sqlite3.connect("StudentDatabase.db")
            cur = conn.cursor()
            cur.execute("SELECT * FROM courses")
            rows = cur.fetchall()
            for row in rows:
                self.courselist.insert("", tk.END, text=row[0], values=row[0:])
            conn.close()
        
        def updateCourse():
            for selected in self.courselist.selection():
                conn = sqlite3.connect("StudentDatabase.db")
                cur = conn.cursor()
                cur.execute("PRAGMA foreign_keys = ON")
                cur.execute("UPDATE courses SET Course_Code=?, Course_Name=? WHERE Course_Code=?", \
                            (Course_Code.get(),Course_Name.get(), self.courselist.set(selected, '#1')))                       
                conn.commit()
                tkinter.messagebox.showinfo("Student Information System", "Course Updated Successfully")
                displayCourse()
                clearCourse()
                conn.close()
                
        def editCourse():
            x = self.courselist.focus()
            if x == "":
                tkinter.messagebox.showerror("Student Information System", "Please select a record from the table.")
                return
            values = self.courselist.item(x, "values")
            Course_Code.set(values[0])
            Course_Name.set(values[1])
                    
        def deleteCourse(): 
            try:
                messageDelete = tkinter.messagebox.askyesno("SSIS", "Do you want to permanently delete this record?")
                if messageDelete > 0:   
                    con = sqlite3.connect("StudentDatabase.db")
                    cur = con.cursor()
                    x = self.courselist.selection()[0]
                    id_no = self.courselist.item(x)["values"][0]
                    cur.execute("PRAGMA foreign_keys = ON")
                    cur.execute("DELETE FROM courses WHERE Course_Code = ?",(id_no,))                   
                    con.commit()
                    self.courselist.delete(x)
                    tkinter.messagebox.askyesno("Student Information System", "Course Deleted Successfully")
                    displayCourse()
                    con.close()                    
            except:
                tkinter.messagebox.showerror("Student Information System", "Students are still enrolled in this course")
                
        def searchCourse():
            Course_Code = SearchBar_Var.get()                
            con = sqlite3.connect("StudentDatabase.db")
            cur = con.cursor()
            cur.execute("SELECT * FROM courses WHERE Course_Code = ?",(Course_Code,))
            con.commit()
            self.courselist.delete(*self.courselist.get_children())
            rows = cur.fetchall()
            for row in rows:
                self.courselist.insert("", tk.END, text=row[0], values=row[0:])
            con.close()
 
        def RefreshCourse():
            displayCourse()
        
        def clearCourse():
            Course_Code.set('')
            Course_Name.set('') 


        ## Label and Entry
        
        self.lblCourseCode = Label(self.root, font=("Poppins", 12, "bold"), text="COURSE CODE:*", padx=5, pady=5)
        self.lblCourseCode.place(x=125,y=500)
        self.txtCourseCode = Entry(self.root, font=("Poppins", 13), textvariable=Course_Code, width=33)
        self.txtCourseCode.place(x=260,y=505)

        self.lblCourseName = Label(self.root, font=("Poppins", 12,"bold"), text="COURSE NAME:*", padx=5, pady=5)
        self.lblCourseName.place(x=125,y=540)
        self.txtCourseName = Entry(self.root, font=("Poppins", 13), textvariable=Course_Name, width=33)
        self.txtCourseName.place(x=260, y=545)
        
        self.SearchBar = Entry(self.root, font=("Poppins", 11), textvariable=SearchBar_Var, width=29)
        self.SearchBar.place(x=876,y=475)
        self.SearchBar.insert(0,'Search ID here')

        ## Treeview
        
        scrollbar = Scrollbar(self.root, orient=VERTICAL)
        scrollbar.place(x=1215,y=15,height=390)

        self.courselist = ttk.Treeview(self.root,
                                        columns=("Course Code", "Course Name"),
                                        height = 10,
                                        yscrollcommand=scrollbar.set)

        self.courselist.heading("Course Code", text="Course Code", anchor=W)
        self.courselist.heading("Course Name", text="Course Name",anchor=W)
        self.courselist['show'] = 'headings'

        self.courselist.column("Course Code", width=200, anchor=W, stretch=False)
        self.courselist.column("Course Name", width=430, stretch=False)

        self.courselist.place(x=575,y=500)
        scrollbar.config(command=self.courselist.yview)
        
        ## Buttons

        self.btnAddCourse = Button(self.root, text="ADD", font=('Poppins', 10), height=1, width=10, bd=4,command=addCourse)
        self.btnAddCourse.place(x=240,y=600)
        
        self.btnUpdateCourse = Button(self.root, text="UPDATE", font=('Poppins', 10), height=1, width=10, bd=4, command=updateCourse)
        self.btnUpdateCourse.place(x=350,y=600)
        
        self.btnClearCourse = Button(self.root, text="CLEAR", font=('Poppins', 10), height=1, width=10, bd=4, command=clearCourse)
        self.btnClearCourse.place(x=130,y=600)
        
        self.btnDeleteCourse = Button(self.root, text="DELETE", font=('Poppins', 10), height=1, width=10, bd=4,command=deleteCourse)
        self.btnDeleteCourse.place(x=460,y=600)
        
        self.btnSelectCourse = Button(self.root, text="Select", font=('Poppins', 10), height=1, width=11,command=editCourse)
        self.btnSelectCourse.place(x=575,y=465)
        
        self.btnSearchCourse = Button(self.root, text="Search", font=('Poppins', 10), height=1, width=10, command=searchCourse)
        self.btnSearchCourse.place(x=1117,y=465)
        
        self.btnRefreshCourse = Button(self.root, text="Show All", font=('Poppins', 10), height=1, width=11,command=RefreshCourse)
        self.btnRefreshCourse.place(x=685,y=465)
        
        
        connectCourse()
        displayCourse()

       
        ## Icons
        #icon1 = ImageTk.PhotoImage(Image.open("D:/Ryan/College/Second Year Second Sem/CSC151N/Python/SSISV2/scratch"))
        #label1 = tk.Label(image=icon1)
        #label1.place(x=1117,y=105)
        
        ## Functions
        Student_ID = StringVar()
        Student_Name = StringVar()       
        Student_YearLevel = StringVar()
        Student_Gender = StringVar()
        #Student_Course = StringVar()
        Student_Course = StringVar()
        SearchBar_Var = StringVar()
        

        def connect():
            conn = sqlite3.connect("StudentDatabase.db")
            cur = conn.cursor()
            cur.execute("PRAGMA foreign_keys = ON")
            cur.execute("CREATE TABLE IF NOT EXISTS studentdatabase (Student_ID TEXT PRIMARY KEY, Student_Name TEXT, Student_Course TEXT, \
                      Student_YearLevel TEXT, Student_Gender TEXT, \
                      FOREIGN KEY(Student_Course) REFERENCES courses(Course_Code) ON UPDATE CASCADE)") 
            conn.commit() 
            conn.close()    
        
        def addData():
            if Student_ID.get() == "" or Student_Name.get() == "" or Student_Course.get() == "" or Student_YearLevel.get() == "" or Student_Gender.get() == "": 
                tkinter.messagebox.showinfo("Student Information System", "Please fill in the box with *")
            else:  
                ID = Student_ID.get()
                ID_list = []
                for i in ID:
                    ID_list.append(i)
                a = ID.split("-")
                if len(a[0]) == 4:        
                    if "-" in ID_list:
                        if len(a[1]) == 1:
                            tkinter.messagebox.showerror("Student Information System", "Invalid ID\nID Number Format:YYYY-NNNN")
                        elif len(a[1]) ==2:
                            tkinter.messagebox.showerror("Student Information System", "Invalid ID\nIID Number Format:YYYY-NNNN")
                        elif len(a[1]) ==3:
                            tkinter.messagebox.showerror("Student Information System", "Invalid ID\nIID Number Format:YYYY-NNNN")
                        else:
                            x = ID.split("-")  
                            year = x[0]
                            number = x[1]
                            if year.isdigit()==False or number.isdigit()==False:
                                try:
                                    tkinter.messagebox.showerror("Student Information System", "Invalid ID")
                                except:
                                    pass
                            elif year==" " or number==" ":
                                try:
                                    tkinter.messagebox.showerror("Student Information System", "Invalid ID")
                                except:
                                    pass
                            else:
                                try:
                                    conn = sqlite3.connect("StudentDatabase.db")
                                    c = conn.cursor() 
                                    c.execute("PRAGMA foreign_keys = ON")                                                                                                              
                                    c.execute("INSERT INTO studentdatabase(Student_ID,Student_Name,Student_Course,Student_YearLevel,Student_Gender) VALUES (?,?,?,?,?)",\
                                                          (Student_ID.get(),Student_Name.get(),Student_Course.get(),Student_YearLevel.get(), Student_Gender.get()))                                       
                                                                       
                                    tkinter.messagebox.showinfo("Student Information System", "Student Recorded Successfully")
                                    conn.commit() 
                                    clear()
                                    displayData()
                                    conn.close()
                                except:
                                    tkinter.messagebox.showerror("Student Information System", "Course Unavailable")
                    else:
                        tkinter.messagebox.showerror("Student Information System", "Invalid ID")
                else:
                    tkinter.messagebox.showerror("Student Information System", "Invalid ID")
                 
        def updateData():
            if Student_ID.get() == "" or Student_Name.get() == "" or Student_Course.get() == "" or Student_YearLevel.get() == "" or Student_Gender.get() == "": 
                tkinter.messagebox.showinfo("Student Information System", "Please select a student")
            else:
                try:
                    for selected in self.studentlist.selection():
                        conn = sqlite3.connect("StudentDatabase.db")
                        cur = conn.cursor()
                        cur.execute("PRAGMA foreign_keys = ON")
                        cur.execute("UPDATE studentdatabase SET Student_ID=?, Student_Name=?, Student_Course=?, Student_YearLevel=?,Student_Gender=?\
                              WHERE Student_ID=?", (Student_ID.get(),Student_Name.get(),Student_Course.get(),Student_YearLevel.get(), Student_Gender.get(),\
                                  self.studentlist.set(selected, '#1')))
                        conn.commit()
                        tkinter.messagebox.showinfo("Student Information System", "Student Updated Successfully")
                        displayData()
                        clear()
                        conn.close()
                except:
                    tkinter.messagebox.showerror("Student Information System", "Cannot Update Student")
        
        def deleteData():   
            try:
                messageDelete = tkinter.messagebox.askyesno("Student Information System", "Do you want to permanently delete this record?")
                if messageDelete > 0:   
                    con = sqlite3.connect("StudentDatabase.db")
                    cur = con.cursor()
                    x = self.studentlist.selection()[0]
                    id_no = self.studentlist.item(x)["values"][0]
                    cur.execute("DELETE FROM studentdatabase WHERE Student_ID = ?",(id_no,))                   
                    con.commit()
                    self.studentlist.delete(x)
                    tkinter.messagebox.showinfo("Student Information System", "Student Deleted Successfully")
                    displayData()
                    con.close()                    
            except Exception as e:
                print(e)
                
        def searchData():
            Student_ID = SearchBar_Var.get()
            try:  
                con = sqlite3.connect("StudentDatabase.db")
                cur = con.cursor()
                cur .execute("PRAGMA foreign_keys = ON")
                cur.execute("SELECT * FROM studentdatabase")
                con.commit()
                self.studentlist.delete(*self.studentlist.get_children())
                rows = cur.fetchall()
                for row in rows:
                    if row[0].startswith(Student_ID):
                        self.studentlist.insert("", tk.END, text=row[0], values=row[0:])
                con.close()
            except:
                tkinter.messagebox.showerror("Student Information System", "Invalid ID")           
                
        def displayData():
            self.studentlist.delete(*self.studentlist.get_children())
            conn = sqlite3.connect("StudentDatabase.db")
            cur = conn.cursor()
            cur.execute("PRAGMA foreign_keys = ON")
            cur.execute("SELECT * FROM studentdatabase")
            rows = cur.fetchall()
            for row in rows:
                self.studentlist.insert("", tk.END, text=row[0], values=row[0:])
            conn.close()
                            
        def editData():
            x = self.studentlist.focus()
            if x == "":
                tkinter.messagebox.showerror("Student Information System", "Please select a record from the table.")
                return
            values = self.studentlist.item(x, "values")
            Student_ID.set(values[0])
            Student_Name.set(values[1])
            Student_Course.set(values[2])
            Student_YearLevel.set(values[3])
            Student_Gender.set(values[4])
            
        def Refresh():
            displayData()
        
        def clear():
            Student_ID.set('')
            Student_Name.set('') 
            Student_YearLevel.set('')
            Student_Gender.set('')
            Student_Course.set('')
            
        ## Label and Entry
        
        self.lblStudentID = Label(self.root, font=("Poppins", 12, "bold"), text="STUDENT ID:*", padx=5, pady=5)
        self.lblStudentID.place(x=125,y=40)
        self.lblStudentIDFormat = Label(self.root, font=("Poppins", 12,"bold"), text="(YYYY - NNNN)")
        self.lblStudentIDFormat.place(x=255,y=70)
        self.txtStudentID = Entry(self.root, font=("Poppins", 13), textvariable=Student_ID, width=33)
        self.txtStudentID.place(x=255,y=45)

        self.lblStudentName = Label(self.root, font=("Poppins", 12,"bold"), text="FULL NAME:*", padx=5, pady=5)
        self.lblStudentName.place(x=125,y=100)
        self.txtStudentName = Entry(self.root, font=("Poppins", 13), textvariable=Student_Name, width=33)
        self.txtStudentName.place(x=255,y=105)
        self.lblStudentNameFormat = Label(self.root, font=("Poppins", 12,"bold"),
                                          text="(SURNAME, NAME, MIDDLE INITIAL)")
        self.lblStudentNameFormat.place(x=255,y=135)
        
        self.lblStudentCourse = Label(self.root, font=("Poppins", 12,"bold"), text="COURSE:*", padx=5, pady=5)
        self.lblStudentCourse.place(x=125,y=160)
        self.txtStudentCourse = Entry(self.root, font=("Poppins", 13), textvariable=Student_Course, width=33)
        self.txtStudentCourse.place(x=255,y=165)

        self.lblStudentYearLevel = Label(self.root, font=("Poppins", 12,"bold"), text="YEAR LEVEL:*", padx=5, pady=5)
        self.lblStudentYearLevel.place(x=125,y=200)
        self.txtStudentYearLevel = ttk.Combobox(self.root,
                                                value=["1st Year", "2nd Year", "3rd Year", "4th Year", "5th Year"],
                                                state="readonly", font=("Poppins", 13), textvariable=Student_YearLevel,
                                                width=31)
        self.txtStudentYearLevel.place(x=255,y=205)

        self.lblStudentGender = Label(self.root, font=("Poppins", 12,"bold"), text="GENDER:*", padx=5, pady=5)
        self.lblStudentGender.place(x=125,y=240)
        self.txtStudentGender = ttk.Combobox(self.root, value=["Male", "Female"], font=("Poppins", 13),
                                             state="readonly", textvariable=Student_Gender, width=31)
        self.txtStudentGender.place(x=255,y=245)

        self.SearchBar = Entry(self.root, font=("Poppins", 11), textvariable=SearchBar_Var, width=29)
        self.SearchBar.place(x=876,y=10)
        self.SearchBar.insert(0,'Search ID here')
        self.lblOwner = Label(self.root, font=("Poppins", 11), text="Submitted by: Martinez, Ryan James J.", bg ="gray15", fg="snow")
        #self.lblOwner.place(x=17,y=376)

        ## Treeview
        
        scrollbar = Scrollbar(self.root, orient=VERTICAL)
        scrollbar.place(x=1215,y=140,height=390)

        self.studentlist = ttk.Treeview(self.root,
                                        columns=("ID Number", "Name", "Course", "Year Level", "Gender"),
                                        height = 18,
                                        yscrollcommand=scrollbar.set)

        self.studentlist.heading("ID Number", text="ID Number", anchor=W)
        self.studentlist.heading("Name", text="Name",anchor=W)
        self.studentlist.heading("Course", text="Course",anchor=W)
        self.studentlist.heading("Year Level", text="Year Level",anchor=W)
        self.studentlist.heading("Gender", text="Gender",anchor=W)
        self.studentlist['show'] = 'headings'

        self.studentlist.column("ID Number", width=100, anchor=W, stretch=False)
        self.studentlist.column("Name", width=200, stretch=False)
        self.studentlist.column("Course", width=130, anchor=W, stretch=False)
        self.studentlist.column("Year Level", width=100, anchor=W, stretch=False)
        self.studentlist.column("Gender", width=100, anchor=W, stretch=False)

        self.studentlist.place(x=575,y=40)
        scrollbar.config(command=self.studentlist.yview)
        
        ## Buttons

        self.btnAddID = Button(self.root, text="ADD", font=('Poppins', 10), height=1, width=10, bd=4,command=addData)
        self.btnAddID.place(x=240,y=300)
        
        self.btnUpdate = Button(self.root, text="UPDATE", font=('Poppins', 10), height=1, width=10, bd=4, command=updateData)
        self.btnUpdate.place(x=350,y=300)
        
        self.btnClear = Button(self.root, text="CLEAR", font=('Poppins', 10), height=1, width=10, bd=4, command=clear)
        self.btnClear.place(x=130,y=300)
        
        self.btnDelete = Button(self.root, text="DELETE", font=('Poppins', 10), height=1, width=10, bd=4,command=deleteData)
        self.btnDelete.place(x=460,y=300)
        
        self.btnSelect = Button(self.root, text="Select", font=('Poppins', 10), height=1, width=11,command=editData)
        self.btnSelect.place(x=575,y=10)
        
        self.btnSearch = Button(self.root, text="Search", font=('Poppins', 10), height=1, width=10, command=searchData)
        self.btnSearch.place(x=1117,y=10)
        
        self.btnRefresh = Button(self.root, text="Show All", font=('Poppins', 10), height=1, width=11,command=Refresh)
        self.btnRefresh.place(x=685,y=10)
        connect()
        displayData()











if __name__ == '__main__':
    root = Tk()
    application = SSIS(root)
    root.mainloop()
